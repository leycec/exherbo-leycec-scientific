# Copyright 2010 Cecil Curry <leycec@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# 
# --------------------( SEE ALSO                           )--------------------
# * "LyX Build Systems." 
#   http://wiki.lyx.org/Devel/BuildSystems
#
# --------------------( TODO                               )--------------------
# * LyX requires TeX Live 2009. Sadly, due to the extreme complexities of
#   its installation, Exherbo has no such exheres. Thus, this exheres assumes
#   you install TeX Live manually via the customary "net install." See:
#       http://www.tug.org/texlive/doc/texlive-en/texlive-en.html 

# ....................{ EXLIB                              }....................
# LyX supports a wide array of build systems: i.e., autotools, CMake, and SCons.
# This exheres prefers SCons, due to the relative transparencies of that system.
# That said, as can be seen below, SCons is hardly perfect.
require scons xfont
export_exlib_phases src_prepare src_compile src_install pkg_postinst

# ....................{ EXHERES                            }....................
BUGS_TO="leycec@gmail.com"

SUMMARY="A WYSIWYM LaTeX editor"
DESCRIPTION="
LyX is a document processor adhering to the self-coined \"what you see is what
you mean\" paradigm (WYSIWYM) as opposed to the conventional WYSIWYG paradigm of
word processors. In the WYSIWYM workflow, users only care about the structure of
and information within the text. The formatting of that text is handled by
LaTeX, an advanced typesetting system. LyX is designed for authors requiring
professional output with a minimum of effort and without specialist knowledge of
typesetting. As LyX largely functions as a front-end to the LaTeX typesetting
system, it produces documents ranging from books, notes, and theses to articles
in refereed journals, letters, and anything else LaTeX can handle. LyX also
supports right-to-left languages like Arabic, Persian, and Hebrew, ideographic
languages like Chinese, Japanese, and Korean, and bidirectional writing.
"

#FIXME: add mirrors as listed at the bottom of http://www.lyx.org/Download
HOMEPAGE="http://www.${PN}.org"
DOWNLOADS="ftp://ftp.devel.${PN}.org/pub/${PN}/stable/${PNV}.tar.bz2"
UPSTREAM_DOCUMENTATION="http://wiki.${PN}.org/LyX/Documentation [[ lang = en ]]"
REMOTE_IDS="freshmeat:${PN}"

SLOT="0"
LICENCES="GPL-2"
MYOPTIONS="
    cups
    docbook [[ description = [ Support Docbook import ] ]]
    pdf     [[ description = [ Support PDF export ] ]]
    rtf     [[ description = [ Support RTF export ] ]]
    dot     [[ description = [ Support use of Graphviz DOT files ] ]]
    dia     [[ description = [ Support use of Dia files ] ]]
    svg     [[ description = [ Support use of SVG files ] ]]
    spell   [[ description = [ Support aspell checking ] ]]
"

#FIXME: when available, add the following optional "build+run" dependency:
#    app-text/aiksaurus 

# For a list of all hypothetical LyX dependencies, see:
# http://www.lyx.org/AdditionalSoftware
DEPENDENCIES="
    build+run:
        dev-lang/python:=[>=2.5]
        dev-libs/boost[>=1.34]
        dev-libs/libxml2
        media-libs/fontconfig
        media-libs/freetype:2
        sys-devel/gettext[>=0.12]
        sys-libs/zlib
        x11-libs/qt:4[>=4.2.2]
        spell? ( app-spell/aspell )
    run:
        || ( media-gfx/GraphicsMagick
             media-gfx/ImageMagick )
        cups?    ( net-print/cups )
        dia?     ( app-diagram/dia )
        docbook? ( app-text/sgmltools-lite )
        dot?     ( media-gfx/graphviz )
        pdf?     ( app-text/ghostscript )
        rtf?     ( app-text/unrtf )
        svg?     ( || ( gnome-base/librsvg
                        media-gfx/inkscape ) )
"
#       app-text/texlive

DEFAULT_SRC_PREPARE_PATCHES=( "${FILES}/scons_utils.py.patch" )

# Absolute path to the directory under which LyX installs itself.
LYX_HOME="/usr/share/lyx"

# Absolute path to the directory under which TexLive 2010 has already been
# installed. If not found, the "src_install" phase for this exheres does not
# make TeX-specific symlinks - which is O.K. These symlinks are not critical.
TEXMF_HOME="/usr/share/texlive/2010"

# The conventional TeX font cache lives at "/var/cache/fonts". Since writing to
# that path breaks path sandboxing, write to a temporary path. (Note this is not
# ideal, as fonts which have already been cached by other exheres or
# applications should not be re-cached by this one. Still, it is the easy fix.)
export VARTEXFONTS="${TEMP}/font_cache"

# SCons acquires nonsensical values for these variables, causing failure during
# configuration. Stop that.
export CC=
export CXX=

# SCons makefiles use nonstandard flag names. Who thought that was a good idea?
export CCFLAGS="${CFLAGS}"
export CPPFLAGS="${CXXFLAGS}"
export LINKFLAGS="${LDFLAGS}"

# ....................{ PHASES                             }....................
lyx_src_prepare() {
    default

    # Symlink the SCons makefile to the top-level build directory.
    edo ln -s "${WORK}/development/scons/SConstruct" "${WORK}/"

    #FIXME leycec: "scons.exlib" could use some refactoring. This should be
    #specifiable in global scope above.
    scons_params=(
        # Absolute path to the root directory under which LyX is installed.
        prefix="/usr"
        # Absolute path to the directory having shared libraries for QT4.
        qt_dir="/usr/share/qt4"
        # Absolute path to the directory having shared libraries for this arch.
        extra_lib_path="/usr/$(get_libdir)"
        # Always disable debugging, at the moment.
        mode=release
        # Always enable QT4 as the GUI framework.
        frontend=qt4
        # Use the system-installed boost.
        boost=system
        # Use the system-installed gettext and gettext-provided native language
        # support (nls).
        gettext=system nls=yes
    )

    if option spell
    then scons_params+=( spell=aspell )
    else scons_params+=( spell=auto   )
    fi

    # Export global variables, for use by the "scons" exlib.
    SCONS_SRC_CONFIGURE_PARAMS=( "${scons_params[@]}" )
    SCONS_SRC_COMPILE_PARAMS=(   "${scons_params[@]}" all )
    SCONS_SRC_INSTALL_PARAMS=(   "${scons_params[@]}" )

    # SCons requires a versioned Boost installation, but Exherbo installs Boost
    # versionless. (As it should.) Fix it by first parsing the version of Boost
    # that is currently installed, and then forcing that version on SCons.
    local boost_version boost_version_file="/usr/include/boost/version.hpp"
    boost_version=$(grep -E '^#define BOOST_LIB_VERSION ".+"$' "${boost_version_file}" | awk '{gsub(/"/, "", $3); print $3}')
    paludis_assert_unless_nonfatal "grepping \"${boost_version_file}\" failed"
    edo sed -r \
        -e 's~^(boost_version = \[).+(\])$~\1'"'${boost_version}'"'\2~' \
        -i "SConstruct"

    # Install man pages to "/usr/share/man" rather than "/usr/man".
    edo sed -r \
        -e "s~(man_dir = ).+$~\\1'share/man/man1'~" \
        -i "SConstruct"
}

#FIXME: LyX's SCons makefile fails with error when "CFLAGS" and fellows are
#defined. Patch "scons.exlib" to stop this, later.
lyx_src_compile() {
    escons \
        --config=cache \
        --jobs ${EXJOBS:-1} \
        "${SCONS_SRC_COMPILE_PARAMS[@]}"
}

#FIXME: LyX's SCons makefile compiles and installs docs and examples by
#default. Make this conditional per usual.
lyx_src_install() {
    # "scons.exlib" does not play nicely with "xfont.exlib". Make sure they do.
    scons_src_install
    xfont_src_install

    insinto "/usr/share/fonts/X11/${PN}/"
    doins "${IMAGE}${LYX_HOME}/fonts"/*.ttf

    if [[ -d "${TEXMF_HOME}" ]]; then
        local TEXMF_LATEX_DIR="${TEXMF_HOME}/texmf-dist/tex/latex"
        dodir                   "${TEXMF_LATEX_DIR}"
        dosym "${LYX_HOME}/tex" "${TEXMF_LATEX_DIR}/${PN}"
    fi
}

lyx_pkg_postinst() {
    xfont_pkg_postinst
    elog "To complete installation, run \"texhash\"."
}

